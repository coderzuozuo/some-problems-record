package com.github.larva.zhang.problems;

import java.sql.SQLException;
import java.util.List;

import com.alibaba.druid.filter.FilterAdapter;
import com.alibaba.druid.filter.FilterChain;
import com.alibaba.druid.proxy.jdbc.ConnectionProxy;
import com.alibaba.druid.proxy.jdbc.PreparedStatementProxy;
import com.alibaba.druid.proxy.jdbc.StatementProxy;
import com.alibaba.druid.sql.SQLUtils;
import com.alibaba.druid.sql.ast.SQLStatement;
import com.alibaba.druid.util.JdbcConstants;

import lombok.extern.slf4j.Slf4j;

/**
 * SimpleRewriteSqlDruidFilter
 *
 * @author zhanghan
 * @date 2019/12/12
 * @since 1.0
 */
@Slf4j
public class SimpleRewriteSqlDruidFilter extends FilterAdapter {

    private final SimpleAppendUpdateTimeVisitor visitor = new SimpleAppendUpdateTimeVisitor();

    @Override
    public boolean statement_execute(FilterChain chain, StatementProxy statement, String sql) throws SQLException {
        String dbType = chain.getDataSource().getDbType();
        List<SQLStatement> sqlStatements = SQLUtils.parseStatements(sql, dbType);
        sqlStatements.forEach(sqlStatement -> sqlStatement.accept(visitor));
        if (visitor.getAndResetRewriteStatus()) {
            // 改写了SQL，需要替换
            String newSql = SQLUtils.toSQLString(sqlStatements, dbType);
            log.info("rewrite sql, origin sql: [{}], new sql: [{}]", sql, newSql);
            return super.statement_execute(chain, statement, newSql);
        }
        return super.statement_execute(chain, statement, sql);
    }

    @Override
    public PreparedStatementProxy connection_prepareStatement(FilterChain chain, ConnectionProxy connection, String sql, int autoGeneratedKeys) throws SQLException {
        List<SQLStatement> sqlStatements = SQLUtils.parseStatements(sql, JdbcConstants.MYSQL);
        sqlStatements.forEach(sqlStatement -> sqlStatement.accept(visitor));
        if (visitor.getAndResetRewriteStatus()) {
            // 改写了SQL，需要替换
            String newSql = SQLUtils.toSQLString(sqlStatements, JdbcConstants.MYSQL);
            log.info("rewrite sql, origin sql: [{}], new sql: [{}]", sql, newSql);
            return super.connection_prepareStatement(chain, connection, newSql, autoGeneratedKeys);
        }
        return super.connection_prepareStatement(chain, connection, sql, autoGeneratedKeys);
    }
}
